
def get_stats(dict_generegions, dict_seq_info, res, path_results_dir, path_w_dir):
    # Get a gene tree.
    path_s_dir = make_if_absent(path_results_dir + "/stats/")
    path_t_dir = make_if_absent(path_results_dir + "/trees/")
    # call_function("iqtree -redo -s "+path_results_dir+"/all.aln -pre "+path_t_dir+"/all.aln.tree -m TEST -quiet")
    # Get original fasta alignment score. If there are any empty sequences, take them out.
    oseqs = read_seqs(path_w_dir + "/or.aln")
    oscore = alignment_score(oseqs, omit_empty=True)
    # Get new alignment score. If there are any empty sequences, take them out.
    nseqs = read_seqs(path_results_dir + "/all.aln")
    nscore = alignment_score(nseqs, omit_empty=True)
    # Write global stats to file:
    path_stats_global = path_s_dir + "/global.stats"
    with open(path_stats_global, "w") as f:
        f.write("oldscore\tnewscore\n")
        f.write(str(oscore) + "\t" + str(nscore))
    stats_sh = tempfile.mktemp() + ".sh"
    stats_script(stats_sh)
    # Write detailed stats to file...
    for sequence in dict_seq_info:
        ogtf = dict_seq_info[sequence]["gtf"]
        ngtf = dict_seq_info[sequence]["res_gtfpath"]
        # sprint("comparing " + ogtf + " and " + ngtf)
        sprint("Gene coordinates written to " + ngtf)
        call_function("bash " + stats_sh + " " + ogtf + " " + ngtf + " > " + path_s_dir + "/" + dict_seq_info[sequence][
            "gtf_id"] + ".stats")


def stats_script(tmpf):
    with open(tmpf, "w") as f:
        f.write(
            '#!/bin/bash\n\n# Input: the unfixed gtf, and the fixed gtf.\n\n# Possible events:\n#\texon removal - in-frame, simple\n#\texon addition - in-frame, simple\n#\tintron removal - in-frame, simple\n#\tintron addition - in-frame, simple\n#\tmoved start codon - in-frame, simple\n#\tmoved start codon - in-frame, intron-containing\n#\t\tmoved intron start - in-frame, simple\n#\t\tmoved intron end - in-frame, simple\n#\tmoved start codon - frame change,simple\n#\tmoved start codon - frame change, intron-containing.\n#\t\tmoved intron start - frame change, simple\n#\t\tmoved intron end - frame change, simple\n#\texon remains exactly the same\n#\texon addition - frame change, simple\n#\texon removal - frame change, simple\n#\tintron addition - frame change, simple\n#\tintron removal - frame change, simple\n#\t\tcomplex events (all other events).\n#\n# Output is in the format\n#\tevent type...inframe?...exoncontaining...changedbases\n\n#echo "====================="\n#echo $1\n\ngene=$1\nfixed=$2\n\not=`mktemp -d `\ngene_cds="$ot/gene_cds"\nfixed_cds="$ot/fixed_cds"\n\nawk \'$3 == "CDS"\' $gene | awk -F "\\t" \'BEGIN{OFS="\\t"}{$9="name_here"; print}\' | sort -k4,4n > $gene_cds\nawk \'$3 == "CDS"\' $fixed | awk -F "\\t" \'BEGIN{OFS="\\t"}{$9="name_here"; print}\' | sort -k4,4n > $fixed_cds\n\n# If the fixed gene is empty, just class this as gene removal and continue\n# Get length of original gene.\nif [[ ! -s $fixed_cds ]]; then \n\tremoved=`cat $gene_cds | awk \'BEGIN{a=0} {a=a+$5-$4+1} END{print 0-a}\'`\n\techo -e "removed_gene\\tinframe\\tcomplex\\t-\\t$removed"\n\texit\nfi\n\nawk \'BEGIN{OFS="\\t"} {$5 = $5 + 1; print}\' $gene_cds > $gene_cds.adj\nawk \'BEGIN{OFS="\\t"} {$5 = $5 + 1; print}\' $fixed_cds > $fixed_cds.adj\n\n# Get the total amount added and subtracted from the original.\n\nremoved=`bedtools subtract -a $gene_cds -b $fixed_cds.adj | awk \'BEGIN{a=0} {a=a+$5-$4+1} END{print 0-a}\'`\nadded=`bedtools subtract -b $gene_cds.adj -a $fixed_cds | awk \'BEGIN{a=0} {a=a+$5-$4+1} END{print a}\'`\necho -e "total_added\\t-\\t-\\t$added"\necho -e "total_removed\\t-\\t-\\t$removed"\n\nstrand=`head -n1 $gene_cds | cut -f7`\n\nif [[ $strand == "-" ]]; then\n\tmaxval=`cat $gene_cds $fixed_cds | cut -f4,5 | sed -r "s/\\t/\\n/g" | sort -n | tail -n1`\n\tawk -v m="$maxval" \'BEGIN{OFS="\\t"} {b=m+1-$4; a=m+1-$5; $4=a; $5=b; print}\' $gene_cds | sort -k4,4n > $gene_cds.tmp\n\tawk -v m="$maxval" \'BEGIN{OFS="\\t"} {b=m+1-$4; a=m+1-$5; $4=a; $5=b; print}\' $fixed_cds | sort -k4,4n > $fixed_cds.tmp\n\tmv $fixed_cds.tmp $fixed_cds\n\tmv $gene_cds.tmp $gene_cds\nfi\n\n# Do the start codon stuff first\n\nstarto=`head -n1 $gene_cds | cut -f 4`\nstartx=`head -n1 $fixed_cds | cut -f 4`\n\n# Check for exons that have remained exactly the same\nbedtools intersect -b $gene_cds  -a $fixed_cds -f 1 -F 1 | sed -r "s/.*/nochange\\tinframe\\tsimple\\t0/g"\nbedtools intersect -b $gene_cds  -a $fixed_cds -f 1 -F 1  > $ot/identical\n\nif [[ $starto -ne $startx ]]; then\n\tstart_chunk="$ot/start_chunk"\n\t# For bedtools and its annoying subtraction problem\n\tif [[ $starto -ge $startx ]]; then\n\t\thead -n1 $gene_cds | awk -v a=$starto -v b=$startx \'BEGIN{OFS="\\t"} {$4 = b; $5 = a -1; print}\' > $start_chunk\n\t\tbedtools intersect -b $start_chunk -a $fixed_cds > $start_chunk.is\n\t\tawk \'BEGIN{OFS="\\t"} {$5 = $5 + 1; print}\' $start_chunk > $start_chunk.adj\n\t\tbedtools subtract -a $fixed_cds -b $start_chunk.adj > $fixed_cds.headless\n\t\tbedtools subtract -a $gene_cds -b $start_chunk.adj > $gene_cds.headless\n\t\tchange=`cat $start_chunk.is | awk \'BEGIN{a=0} {a=a+$5-$4+1} END{print a}\'`\n\t\t# Check frame\n\t\tif [[ $diff_frame -eq 0 ]]; then\n\t\t\tmessage1="moved_start\\tinframe"\n\t\telse\n\t\t\tmessage1="moved_start\\tframeshift"\n\t\tfi\n\t\t# Check whether any introns have been introduced by the new start codon.\n\t\tif cmp -s "$start_chunk.is" "$start_chunk"; then\n\t\t\tmessage2="simple"\n\t\telse\n\t\t\tmessage2="introncontaining"\n\t\tfi\n\t\techo -e "$message1\\t$message2\\t$change"\n\telse\n\t\thead -n1 $gene_cds | awk -v a=$starto -v b=$startx \'BEGIN{OFS="\\t"}{$4 = a; $5 = b -1; print}\' > $start_chunk\n\t\tbedtools intersect -b $start_chunk -a $gene_cds > $start_chunk.is\n\t\tawk \'BEGIN{OFS="\\t"} {$5 = $5 + 1; print}\' $start_chunk > $start_chunk.adj\n\t\tbedtools subtract -a $fixed_cds -b $start_chunk.adj > $fixed_cds.headless\n\t\tbedtools subtract -a $gene_cds -b $start_chunk.adj > $gene_cds.headless\n\t\tchange=`cat $start_chunk.is | awk \'BEGIN{a=0} {a=a+$5-$4+1} END{print a}\'`\n\t\tif [[ $diff_frame -eq 0 ]]; then\n\t\t\tmessage1="moved_start\\tinframe"\n\t\telse\n\t\t\tmessage1="moved_start\\tframeshift"\n\t\tfi\n\t\t# Check whether any introns have been introduced by the new start codon.\n\t\tif cmp -s "$start_chunk.is" "$start_chunk"; then\n\t\t\tmessage2="simple"\n\t\telse\n\t\t\tmessage2="introncontaining"\n\t\tfi\n\t\techo -e "$message1\\t$message2\\t-$change"\n\tfi\n\tgene_cds=$gene_cds.headless\n\tfixed_cds=$fixed_cds.headless\nfi\n\n# Check for simple exon removal events\nloneexons_o="$ot/lone_o"\nawk \'BEGIN{OFS="\\t"} {$5 = $5 + 1; print}\' $fixed_cds > $fixed_cds.adj\nbedtools subtract -A -a $gene_cds -b $fixed_cds.adj > $loneexons_o\nawk \'{a=$5 - $4+ 1; if(a % 3 == 0) {print "removed_exon\\tinframe\\tsimple\\t-"a} else {print "removed_exon\\tframeshift\\tsimple\\t-"a}}\' $loneexons_o\n\n# Check for simple exon addition  events\nloneexons_x="$ot/lone_x"\nawk \'BEGIN{OFS="\\t"} {$5 = $5 + 1; print}\' $gene_cds > $gene_cds.adj\nbedtools subtract -A -b $gene_cds.adj -a $fixed_cds > $loneexons_x\nawk \'{a=$5 - $4+ 1; if(a % 3 == 0) {print "added_exon\\tinframe\\tsimple\\t"a} else {print "added_exon\\tframeshift\\tsimple\\t"a}}\' $loneexons_x\n\n# Adjust our copy of the x\'d file once we\'ve acknowledged the changes.\nawk \'BEGIN{OFS="\\t"} {$5 = $5 + 1; print}\' $loneexons_x > $loneexons_x.adj\nbedtools subtract -A -a $fixed_cds -b $loneexons_x.adj > $fixed_cds.tmp\ncat $fixed_cds.tmp $loneexons_o > $fixed_cds\nawk \'BEGIN{OFS="\\t"} {$5 = $5 + 1; print}\'  $ot/identical >  $ot/identical.adj\nbedtools subtract -A -a  $fixed_cds -b $ot/identical.adj > $fixed_cds.tmp\nbedtools subtract -A -a  $gene_cds -b $ot/identical.adj > $gene_cds.tmp\nmv $fixed_cds.tmp $fixed_cds\nmv $gene_cds.tmp $gene_cds\n\n#For intron checking -- invert.\n#cat $fixed_cds\n#cat $gene_cds\n\n# Check for simple intron removal events\nbase_gene="$ot/base_gene"\nbase_fixed="$ot/base_fixed"\n\nstarto=`sort -k4,4n $gene_cds | head -n1 | cut -f 4`\nendo=`sort -k4,4n $gene_cds | tail -n1 | cut -f 5`\nstartx=`sort -k4,4n $fixed_cds | head -n1 | cut -f 4`\nendx=`sort -k4,4n $fixed_cds | tail -n1 | cut -f 5`\n\nhead -n1 $gene_cds | awk -v a=$starto -v b=$endo \'BEGIN{OFS="\\t"} {$4 = a; $5 = b; print}\' > $base_gene\nhead -n1 $fixed_cds | awk -v a=$startx -v b=$endx \'BEGIN{OFS="\\t"} {$4 = a; $5 = b; print}\' > $base_fixed\n\ngene_introns="$ot/gene_introns"\nfixed_introns="$ot/fixed_introns"\n\nawk \'BEGIN{OFS="\\t"} {$5 = $5 + 1; print}\' $gene_cds > $gene_cds.adj\nawk \'BEGIN{OFS="\\t"} {$5 = $5 + 1; print}\' $fixed_cds > $fixed_cds.adj\n\nbedtools subtract -a $base_gene -b $gene_cds.adj > $gene_introns\nbedtools subtract -a $base_fixed -b $fixed_cds.adj > $fixed_introns\n\n# Check for simple intron addition events\nloneintrons_o="$ot/lonei_o"\nawk \'BEGIN{OFS="\\t"} {$5 = $5 + 1; print}\' $fixed_introns > $fixed_introns.adj\nbedtools subtract -A -a $gene_introns -b $fixed_introns.adj > $loneintrons_o\nawk \'{a=$5 - $4 + 1; if(a % 3 == 0) {print "removed_intron\\tinframe\\tsimple\\t"a} else {print "removed_intron\\tframeshift\\tsimple\\t"a}}\' $loneintrons_o\n\n# Check for simple intron removal events\nloneintrons_x="$ot/lonei_x"\nawk \'BEGIN{OFS="\\t"} {$5 = $5 + 1; print}\' $gene_introns > $gene_introns.adj\nbedtools subtract -A -b $gene_introns.adj -a $fixed_introns > $loneintrons_x\nawk \'{a=$5 - $4 + 1; if(a % 3 == 0) {print "added_intron\\tinframe\\tsimple\\t-"a} else {print "added_intron\\tframeshift\\tsimple\\t-"a}}\' $loneintrons_x\n\n# Check for complex events and adjust our copy of the x\'d file once we\'ve acknowledged the changes.\nawk \'BEGIN{OFS="\\t"} {$5 = $5 + 1; print}\' $loneintrons_x > $loneintrons_x.adj\nbedtools subtract -A -a $fixed_introns -b $loneintrons_x.adj > $fixed_introns.tmp\ncat $fixed_introns.tmp $loneintrons_o > $fixed_introns\n\nawk \'BEGIN{OFS="\\t"} {$5 = $5 + 1; print}\' $fixed_introns > $fixed_introns.adj\nbedtools subtract -a  $base_fixed -b $fixed_introns.adj > $fixed_cds\n\nbedtools intersect -a $gene_cds -b $fixed_cds -wa -wb > $ot/cds_intersection\ncut -f1-9 $ot/cds_intersection | sort | uniq -u > $gene_cds.good\ncut -f1-9 $ot/cds_intersection | sort | uniq -d > $gene_cds.junk\ncut -f10-18 $ot/cds_intersection | sort | uniq -u > $fixed_cds.good\ncut -f10-18 $ot/cds_intersection | sort | uniq -d > $fixed_cds.junk\n\nawk \'BEGIN{OFS="\\t"} {$5 = $5 + 1; print}\' $fixed_cds.good > $fixed_cds.good.adj\nawk \'BEGIN{OFS="\\t"} {$5 = $5 + 1; print}\' $gene_cds.good > $gene_cds.good.adj\nbedtools subtract -b $gene_cds.good.adj -a $fixed_cds.good | awk \'{a=$5 - $4 +1; if(a % 3 == 0) {print "exon_extension\\tinframe\\tsimple\\t"a} else {print "exon_extension\\tframeshift\\tsimple\\t"a}}\'\nbedtools subtract -a $gene_cds.good -b $fixed_cds.good.adj | awk \'{a=$5 - $4 +1; if(a % 3 == 0) {print "exon_contraction\\tinframe\\tsimple\\t-"a} else {print "exon_contraction\\tframeshift\\tsimple\\t-"a}}\'\n\n# Junk\nawk \'BEGIN{OFS="\\t"} {$5 = $5 + 1; print}\' $gene_cds.junk  > $gene_cds.junk.adj\nawk \'BEGIN{OFS="\\t"} {$5 = $5 + 1; print}\' $fixed_cds.junk > $fixed_cds.junk.adj\njunk_removed=`bedtools subtract -a $gene_cds.junk.adj -b $fixed_cds.junk | awk \'BEGIN{a=0} {a=a+$5-$4 +1} END{print 0-a}\'`\njunk_added=`bedtools subtract -b $gene_cds.junk -a $fixed_cds.junk.adj | awk \'BEGIN{a=0} {a=a+$5-$4 +1} END{print a}\'`\necho -e "other_added\\t-\\t-\\t$junk_added"\necho -e "other_removed\\t-\\t-\\t$junk_removed"\n\n#cat $gene_cds\n#cat $fixed_cds\n\n\nrm -r $ot\n')
